const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

class YouTubeMusicDownloader {
    constructor() {
        this.downloadPath = './downloads';
        this.searchTerms = [
            'nh·∫°c tr·∫ª vi·ªát nam',
            'nh·∫°c bolero vi·ªát nam',
            'nh·∫°c v√†ng vi·ªát nam',
            'nh·∫°c rock vi·ªát nam',
            'nh·∫°c pop vi·ªát nam',
            'nh·∫°c dance vi·ªát nam',
            'nh·∫°c chill vi·ªát nam',
            'vietnamese music',
            'nh·∫°c vi·ªát nam hay nh·∫•t',
            'top hits vi·ªát nam'
        ];
    }

    async checkYtDlp() {
        return new Promise((resolve) => {
            const ytdlp = spawn('yt-dlp', ['--version']);
            
            ytdlp.on('close', (code) => {
                if (code === 0) {
                    console.log('‚úÖ yt-dlp ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t');
                    resolve(true);
                } else {
                    console.log('‚ùå yt-dlp ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t');
                    resolve(false);
                }
            });
            
            ytdlp.on('error', () => {
                console.log('‚ùå yt-dlp ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t');
                resolve(false);
            });
        });
    }

    async installYtDlp() {
        console.log('üì¶ ƒêang c√†i ƒë·∫∑t yt-dlp...');
        
        return new Promise((resolve) => {
            const npm = spawn('npm', ['install', '-g', 'yt-dlp']);
            
            npm.on('close', (code) => {
                if (code === 0) {
                    console.log('‚úÖ ƒê√£ c√†i ƒë·∫∑t yt-dlp th√†nh c√¥ng');
                    resolve(true);
                } else {
                    console.log('‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t yt-dlp');
                    resolve(false);
                }
            });
            
            npm.on('error', () => {
                console.log('‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t yt-dlp');
                resolve(false);
            });
        });
    }

    async searchAndDownload(searchTerm) {
        console.log(`üîç ƒêang t√¨m ki·∫øm: ${searchTerm}`);
        
        const searchUrl = `ytsearch10:${searchTerm}`;
        const outputTemplate = path.join(this.downloadPath, '%(title)s.%(ext)s');
        
        return new Promise((resolve) => {
            const ytdlp = spawn('yt-dlp', [
                searchUrl,
                '-x',                    // Extract audio only
                '--audio-format', 'mp3', // Convert to MP3
                '--audio-quality', '0',  // Best quality
                '-o', outputTemplate,    // Output template
                '--no-playlist',         // Don't download playlists
                '--max-downloads', '5',  // Max 5 videos per search
                '--write-thumbnail',     // Download thumbnail
                '--add-metadata',        // Add metadata
                '--embed-thumbnail',     // Embed thumbnail
                '--extract-audio',       // Extract audio
                '--format', 'bestaudio/best', // Best audio format
                '--prefer-ffmpeg',       // Prefer ffmpeg
                '--postprocessors', 'FFmpegExtractAudio:-c:a mp3 -b:a 320k' // High quality MP3
            ]);
            
            ytdlp.stdout.on('data', (data) => {
                console.log(`üì• ${data.toString().trim()}`);
            });
            
            ytdlp.stderr.on('data', (data) => {
                console.log(`‚ö†Ô∏è ${data.toString().trim()}`);
            });
            
            ytdlp.on('close', (code) => {
                if (code === 0) {
                    console.log(`‚úÖ Ho√†n th√†nh t·∫£i nh·∫°c cho: ${searchTerm}`);
                } else {
                    console.log(`‚ùå L·ªói khi t·∫£i nh·∫°c cho: ${searchTerm}`);
                }
                resolve();
            });
            
            ytdlp.on('error', (error) => {
                console.log(`‚ùå L·ªói yt-dlp: ${error.message}`);
                resolve();
            });
        });
    }

    async downloadFromPlaylist(playlistUrl) {
        console.log(`üìã ƒêang t·∫£i playlist: ${playlistUrl}`);
        
        const outputTemplate = path.join(this.downloadPath, '%(playlist_index)s-%(title)s.%(ext)s');
        
        return new Promise((resolve) => {
            const ytdlp = spawn('yt-dlp', [
                playlistUrl,
                '-x',                    // Extract audio only
                '--audio-format', 'mp3', // Convert to MP3
                '--audio-quality', '0',  // Best quality
                '-o', outputTemplate,    // Output template
                '--write-thumbnail',     // Download thumbnail
                '--add-metadata',        // Add metadata
                '--embed-thumbnail',     // Embed thumbnail
                '--extract-audio',       // Extract audio
                '--format', 'bestaudio/best', // Best audio format
                '--prefer-ffmpeg',       // Prefer ffmpeg
                '--postprocessors', 'FFmpegExtractAudio:-c:a mp3 -b:a 320k' // High quality MP3
            ]);
            
            ytdlp.stdout.on('data', (data) => {
                console.log(`üì• ${data.toString().trim()}`);
            });
            
            ytdlp.stderr.on('data', (data) => {
                console.log(`‚ö†Ô∏è ${data.toString().trim()}`);
            });
            
            ytdlp.on('close', (code) => {
                if (code === 0) {
                    console.log(`‚úÖ Ho√†n th√†nh t·∫£i playlist`);
                } else {
                    console.log(`‚ùå L·ªói khi t·∫£i playlist`);
                }
                resolve();
            });
            
            ytdlp.on('error', (error) => {
                console.log(`‚ùå L·ªói yt-dlp: ${error.message}`);
                resolve();
            });
        });
    }

    async downloadFromChannel(channelUrl) {
        console.log(`üì∫ ƒêang t·∫£i t·ª´ channel: ${channelUrl}`);
        
        const outputTemplate = path.join(this.downloadPath, '%(uploader)s/%(title)s.%(ext)s');
        
        return new Promise((resolve) => {
            const ytdlp = spawn('yt-dlp', [
                channelUrl,
                '-x',                    // Extract audio only
                '--audio-format', 'mp3', // Convert to MP3
                '--audio-quality', '0',  // Best quality
                '-o', outputTemplate,    // Output template
                '--max-downloads', '20', // Max 20 videos
                '--write-thumbnail',     // Download thumbnail
                '--add-metadata',        // Add metadata
                '--embed-thumbnail',     // Embed thumbnail
                '--extract-audio',       // Extract audio
                '--format', 'bestaudio/best', // Best audio format
                '--prefer-ffmpeg',       // Prefer ffmpeg
                '--postprocessors', 'FFmpegExtractAudio:-c:a mp3 -b:a 320k' // High quality MP3
            ]);
            
            ytdlp.stdout.on('data', (data) => {
                console.log(`üì• ${data.toString().trim()}`);
            });
            
            ytdlp.stderr.on('data', (data) => {
                console.log(`‚ö†Ô∏è ${data.toString().trim()}`);
            });
            
            ytdlp.on('close', (code) => {
                if (code === 0) {
                    console.log(`‚úÖ Ho√†n th√†nh t·∫£i t·ª´ channel`);
                } else {
                    console.log(`‚ùå L·ªói khi t·∫£i t·ª´ channel`);
                }
                resolve();
            });
            
            ytdlp.on('error', (error) => {
                console.log(`‚ùå L·ªói yt-dlp: ${error.message}`);
                resolve();
            });
        });
    }

    async downloadAllMusic() {
        console.log('üéµ B·∫Øt ƒë·∫ßu t·∫£i t·∫•t c·∫£ nh·∫°c t·ª´ YouTube...');
        
        // Ki·ªÉm tra yt-dlp
        const hasYtDlp = await this.checkYtDlp();
        if (!hasYtDlp) {
            console.log('üì¶ C√†i ƒë·∫∑t yt-dlp...');
            const installed = await this.installYtDlp();
            if (!installed) {
                console.log('‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t yt-dlp. Vui l√≤ng c√†i ƒë·∫∑t th·ªß c√¥ng.');
                return;
            }
        }
        
        // T·∫°o th∆∞ m·ª•c downloads n·∫øu ch∆∞a c√≥
        if (!fs.existsSync(this.downloadPath)) {
            fs.mkdirSync(this.downloadPath, { recursive: true });
        }
        
        // T·∫£i nh·∫°c theo t·ª´ kh√≥a t√¨m ki·∫øm
        for (const term of this.searchTerms) {
            await this.searchAndDownload(term);
            // Delay gi·ªØa c√°c t√¨m ki·∫øm
            await new Promise(resolve => setTimeout(resolve, 2000));
        }
        
        // T·∫£i t·ª´ m·ªôt s·ªë playlist ph·ªï bi·∫øn
        const popularPlaylists = [
            'https://www.youtube.com/playlist?list=PLWz5rJ2EKKc9Gq6FEnbsXJgqcnQJa0G8S', // Nh·∫°c tr·∫ª Vi·ªát Nam
            'https://www.youtube.com/playlist?list=PLWz5rJ2EKKc8j2B07z5E-zK2V9X6fXb8M', // Nh·∫°c bolero
            'https://www.youtube.com/playlist?list=PLWz5rJ2EKKc7j2B07z5E-zK2V9X6fXb8M'  // Nh·∫°c v√†ng
        ];
        
        for (const playlist of popularPlaylists) {
            try {
                await this.downloadFromPlaylist(playlist);
                await new Promise(resolve => setTimeout(resolve, 3000));
            } catch (error) {
                console.log(`‚ùå L·ªói playlist ${playlist}: ${error.message}`);
            }
        }
        
        // T·∫£i t·ª´ m·ªôt s·ªë channel √¢m nh·∫°c Vi·ªát Nam
        const musicChannels = [
            'https://www.youtube.com/@NhacTreVietNam',
            'https://www.youtube.com/@NhacBolero',
            'https://www.youtube.com/@NhacVang'
        ];
        
        for (const channel of musicChannels) {
            try {
                await this.downloadFromChannel(channel);
                await new Promise(resolve => setTimeout(resolve, 5000));
            } catch (error) {
                console.log(`‚ùå L·ªói channel ${channel}: ${error.message}`);
            }
        }
        
        console.log('üéâ Ho√†n th√†nh t·∫£i t·∫•t c·∫£ nh·∫°c!');
        console.log(`üìÅ Ki·ªÉm tra th∆∞ m·ª•c: ${this.downloadPath}`);
    }
}

// Main function
async function main() {
    const downloader = new YouTubeMusicDownloader();
    await downloader.downloadAllMusic();
}

// Run if called directly
if (require.main === module) {
    main();
}

module.exports = YouTubeMusicDownloader;
