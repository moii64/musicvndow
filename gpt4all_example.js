const { GPT4All } = require('gpt4all');

// Ki·ªÉm tra xem GPT4All c√≥ s·∫µn kh√¥ng
async function checkGPT4All() {
    try {
        // Ki·ªÉm tra xem module c√≥ ƒë∆∞·ª£c c√†i ƒë·∫∑t kh√¥ng
        const gpt4all = require('gpt4all');
        console.log('‚úÖ GPT4All module ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t');
        
        // Ki·ªÉm tra phi√™n b·∫£n
        console.log('üì¶ Phi√™n b·∫£n GPT4All:', require('gpt4all/package.json').version);
        
        return true;
    } catch (error) {
        console.log('‚ùå GPT4All ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t');
        console.log('üí° Ch·∫°y: npm install gpt4all');
        return false;
    }
}

// Ki·ªÉm tra model c√≥ s·∫µn kh√¥ng
async function checkModel(modelName = 'ggml-gpt4all-j-v1.3-groovy') {
    try {
        const gpt4all = new GPT4All(modelName);
        
        // Ki·ªÉm tra xem model c√≥ t·ªìn t·∫°i kh√¥ng
        const isModelDownloaded = await gpt4all.isModelDownloaded();
        
        if (isModelDownloaded) {
            console.log(`‚úÖ Model "${modelName}" ƒë√£ ƒë∆∞·ª£c t·∫£i`);
            return true;
        } else {
            console.log(`‚ö†Ô∏è Model "${modelName}" ch∆∞a ƒë∆∞·ª£c t·∫£i`);
            console.log('üí° ƒêang t·∫£i model...');
            
            // T·∫£i model
            await gpt4all.downloadModel();
            console.log(`‚úÖ ƒê√£ t·∫£i xong model "${modelName}"`);
            return true;
        }
    } catch (error) {
        console.log(`‚ùå L·ªói khi ki·ªÉm tra model "${modelName}":`, error.message);
        return false;
    }
}

// Ki·ªÉm tra k·∫øt n·ªëi v√† test chat
async function testChat() {
    try {
        const gpt4all = new GPT4All('ggml-gpt4all-j-v1.3-groovy');
        
        // Kh·ªüi t·∫°o model
        await gpt4all.init();
        console.log('‚úÖ Model ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng');
        
        // Test chat ƒë∆°n gi·∫£n
        const response = await gpt4all.chat([
            { role: 'user', content: 'Xin ch√†o! B·∫°n c√≥ th·ªÉ gi√∫p t√¥i kh√¥ng?' }
        ]);
        
        console.log('ü§ñ Ph·∫£n h·ªìi t·ª´ GPT4All:');
        console.log(response.choices[0].message.content);
        
        // ƒê√≥ng k·∫øt n·ªëi
        await gpt4all.close();
        console.log('‚úÖ K·∫øt n·ªëi ƒë√£ ƒë∆∞·ª£c ƒë√≥ng');
        
        return true;
    } catch (error) {
        console.log('‚ùå L·ªói khi test chat:', error.message);
        return false;
    }
}

// H√†m ki·ªÉm tra t·ªïng h·ª£p
async function runAllChecks() {
    console.log('üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra GPT4All...\n');
    
    // Ki·ªÉm tra module
    const moduleCheck = await checkGPT4All();
    if (!moduleCheck) return;
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // Ki·ªÉm tra model
    const modelCheck = await checkModel();
    if (!modelCheck) return;
    
    console.log('\n' + '='.repeat(50) + '\n');
    
    // Test chat
    await testChat();
    
    console.log('\n' + '='.repeat(50));
    console.log('‚úÖ Ho√†n th√†nh ki·ªÉm tra GPT4All!');
}

// Ch·∫°y ki·ªÉm tra n·∫øu file ƒë∆∞·ª£c th·ª±c thi tr·ª±c ti·∫øp
if (require.main === module) {
    runAllChecks().catch(console.error);
}

module.exports = {
    checkGPT4All,
    checkModel,
    testChat,
    runAllChecks
};

